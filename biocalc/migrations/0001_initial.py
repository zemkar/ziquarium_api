# Generated by Django 4.1.3 on 2023-02-26 10:40

import biocalc.models.aqua_base_item
import biocalc.models.aqua_item_gallery
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_type', models.CharField(choices=[('B', 'BILLING'), ('S', 'SHIPPING')], max_length=1)),
                ('default', models.BooleanField(default=False)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('city', models.CharField(max_length=100)),
                ('street_address', models.CharField(max_length=100)),
                ('apartment_address', models.CharField(max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='AquaBaseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('type_category', models.CharField(choices=[('Undefined', 'Undefined'), ('Another', 'Another'), ('Fish', 'Fish'), ('Plant', 'Plant'), ('Equipment', 'Equipment')], default='Undefined', max_length=20)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True, unique=True)),
                ('image', models.ImageField(blank=True, default='SomeItem.png', null=True, upload_to=biocalc.models.aqua_base_item.path_rename)),
                ('approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('edited_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, max_length=2000, verbose_name='description')),
                ('approving_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acceptor', to=settings.AUTH_USER_MODEL, verbose_name='Acceptor')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FishCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='category')),
                ('slug', models.SlugField(blank=True, max_length=100, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Fish category',
                'verbose_name_plural': 'Fish categories',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('P', 'pending'), ('C', 'completed')], default='P', max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_orders', to='biocalc.address')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shipping_orders', to='biocalc.address')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='PlantCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Plants category')),
                ('slug', models.SlugField(blank=True, max_length=100, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Plants category',
                'verbose_name_plural': 'Plants categories',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True, unique=True)),
                ('tank_volume', models.PositiveIntegerField(verbose_name='Tank volume (l)')),
                ('tank_dimensions', models.CharField(blank=True, max_length=15, null=True, verbose_name='Tank width (cm)')),
                ('tank_filter', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Filter (l/h)')),
                ('tank_compressor', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Compressor (l/h)')),
                ('soil_volume', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Volume of soil (l)')),
                ('soil_type', models.CharField(max_length=20, verbose_name='Soil type')),
                ('decor_volume', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Volume of decor (l)')),
                ('fish_points', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Tank',
                'verbose_name_plural': 'Tanks',
            },
        ),
        migrations.CreateModel(
            name='SocialSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('aquarium_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biocalc.aquabaseitem')),
                ('comments', models.ManyToManyField(blank=True, related_name='social_segments', through='biocalc.Comment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='phone', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('P', 'pending'), ('C', 'completed'), ('F', 'failed')], default='P', max_length=1)),
                ('payment_option', models.CharField(choices=[('P', 'paypal'), ('S', 'stripe')], max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='biocalc.order')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='biocalc.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_orders', to='biocalc.aquabaseitem')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ItemSellingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('quantity_for_discount', models.PositiveSmallIntegerField(default=0)),
                ('quantity_discount', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('sale_status', models.BooleanField(default=False)),
                ('sale_discount', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('sale_end_date', models.DateField(blank=True, null=True)),
                ('shop_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shop_item', to='biocalc.aquabaseitem')),
            ],
        ),
        migrations.CreateModel(
            name='ItemGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, default='/media/SomeItem.png', null=True, upload_to=biocalc.models.aqua_item_gallery.product_image_path)),
                ('aqua_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biocalc.aquabaseitem')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='social_segment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biocalc.socialsegment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AquaProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=30)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='aquabaseitem',
            name='gallery',
            field=models.ManyToManyField(blank=True, to='biocalc.itemgalleryimage'),
        ),
        migrations.AddField(
            model_name='aquabaseitem',
            name='latest_editor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='latest_editor', to=settings.AUTH_USER_MODEL, verbose_name='latest_editor'),
        ),
        migrations.AddField(
            model_name='aquabaseitem',
            name='user_placeholder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='placeholder', to=settings.AUTH_USER_MODEL, verbose_name='Placeholder'),
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('aquabaseitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='biocalc.aquabaseitem')),
                ('plant_value', models.IntegerField(auto_created=True, default=0)),
                ('scientific_name', models.CharField(blank=True, max_length=250, null=True, unique=True, verbose_name='Scientific name')),
                ('family', models.CharField(blank=True, max_length=250, null=True)),
                ('origin', models.CharField(blank=True, max_length=250, null=True)),
                ('care', models.CharField(blank=True, max_length=250, null=True)),
                ('ph_comfort_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('ph_comfort_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('ph_survive_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('ph_survive_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_comfort_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_comfort_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_survive_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_survive_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('temperature_comfort_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_comfort_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_survive_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_survive_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('aeration', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('co2', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('filtration', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('illumination_intensity', models.PositiveSmallIntegerField(default=0, verbose_name='Illumination (lumen/liter)')),
                ('illumination_duration', models.CharField(default='0', max_length=2, verbose_name='Duration of illumination (hours/day)')),
                ('streams', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('soil', models.CharField(blank=True, max_length=250, null=True)),
                ('water_change', models.CharField(blank=True, max_length=25, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='Plant category', to='biocalc.plantcategory', verbose_name='plant category')),
            ],
            options={
                'verbose_name': 'Plant',
                'verbose_name_plural': 'Plants',
                'ordering': ('id',),
            },
            bases=('biocalc.aquabaseitem',),
        ),
        migrations.CreateModel(
            name='Fish',
            fields=[
                ('aquabaseitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='biocalc.aquabaseitem')),
                ('scientific_name', models.CharField(blank=True, max_length=250, null=True, unique=True, verbose_name='Scientific name')),
                ('family', models.CharField(blank=True, max_length=250, null=True)),
                ('origin', models.CharField(blank=True, max_length=250, null=True)),
                ('social', models.CharField(blank=True, max_length=250, null=True)),
                ('flock', models.CharField(blank=True, max_length=250, null=True)),
                ('tank_level', models.CharField(blank=True, max_length=25, null=True)),
                ('min_tank_size_one', models.CharField(blank=True, max_length=25, null=True, verbose_name='Minimum area for one fish')),
                ('min_tank_size_pair', models.CharField(blank=True, max_length=25, null=True, verbose_name='Minimum area for a pair of fish')),
                ('min_tank_size_next_one', models.CharField(blank=True, max_length=25, null=True, verbose_name='Minimum area for each subsequent fish')),
                ('min_water_volume_one', models.CharField(blank=True, max_length=5, null=True, verbose_name='Minimum volume for one fish')),
                ('min_water_volume_pair', models.CharField(blank=True, max_length=5, null=True, verbose_name='Minimum volume for a pair of fish')),
                ('min_water_volume_next_one', models.CharField(blank=True, max_length=5, null=True, verbose_name='Minimum volume for each subsequent fish')),
                ('diet', models.CharField(blank=True, max_length=250, null=True)),
                ('breeding', models.CharField(blank=True, max_length=250, null=True)),
                ('care', models.CharField(blank=True, max_length=250, null=True)),
                ('ph_comfort_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('ph_comfort_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('ph_survive_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('ph_survive_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_comfort_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_comfort_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_survive_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('water_hardness_survive_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('temperature_comfort_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_comfort_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_survive_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_survive_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('aeration', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('filtration', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('illumination', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('water_transparency', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('shelters', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('open_space', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('natural_driftwood', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('living_plants', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('streams', models.CharField(choices=[('0', 'DANGEROUS'), ('1', 'NOT RECOMMENDED'), ('2', 'NOT REQUIRED'), ('3', 'DOES NOT AFFECT'), ('4', 'UNKNOWN'), ('5', 'ALLOWED'), ('6', 'RECOMMENDED'), ('7', 'REQUIRED')], default='4', max_length=1)),
                ('soil', models.CharField(blank=True, max_length=250, null=True)),
                ('water_change', models.CharField(blank=True, max_length=25, null=True)),
                ('lifespan', models.CharField(blank=True, max_length=3, null=True)),
                ('male_average_length', models.CharField(blank=True, max_length=5, null=True)),
                ('female_average_length', models.CharField(blank=True, max_length=5, null=True)),
                ('fish_value', models.IntegerField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='Fish category', to='biocalc.fishcategory', verbose_name='category')),
            ],
            options={
                'verbose_name': 'Fish',
                'verbose_name_plural': 'Fishes',
                'ordering': ('id',),
            },
            bases=('biocalc.aquabaseitem',),
        ),
    ]
